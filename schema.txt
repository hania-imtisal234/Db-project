create database confinty_final
use confinty_final


DROP TABLE  Login_ 
DROP TABLE  Users   
DROP TABLE  Admin_  
DROP TABLE  Transactions   
DROP TABLE  Loan_Type
DROP TABLE  Loan_request
DROP TABLE  Feedback
DROP TABLE  Book_appointment
DROP TABLE  Services_type
DROP TABLE  Services_request_
DROP TABLE  IncomeStatement

select* from Login__ 
select* from Users
select* from Admin
select* from Transactions
select* from Loan_Type
select* from Loan_request
select* from Feedback
select* from Book_appointments--
select* from Services_type
select* from Services_request
select* from Appointment_
select* from appSchedule
select* from IncomeStatement
select* from Services_request
--hania



CREATE TABLE Login__ (
	email NVARCHAR(30) PRIMARY KEY NOT NULL,
	password NVARCHAR(30) NOT NULL,
	Phone_number nvarchar(30)  NOT NULL,
);

insert into Login__
values
('hania@gmail.com','hania789',03317835682),
('ali@gmail.com','ali459', 03457735785),
('nawal@gmail.com' , 'nawal789', 03162456739);

select *from Login__

CREATE TABLE Users(
   
	username NVARCHAR(15) NOT NULL,	
	password_ nvarchar(15) not null,
	email NVARCHAR(30) unique not null, --fk login (email)
	address_ varchar(50),
	Phone_number nvarchar(30)NOT NULL ,
	Account_number INT Primary key NOT NULL,
	amount int ,	
);

select*from Users
insert into Users values ('ali_user','alitheuser','alialiali@gmail.com','modeltoen','3359080435',2,2002)


CREATE TABLE Admin(
	email NVARCHAR(30) PRIMARY KEY NOT NULL, 
	Admin_id int NOT NULL,
	Phone_number nvarchar(11)  NOT NULL,
);


insert into Admin
values
('ali@gmail.com',2,033152635889),
('hania@gmail.com', 1,  '03317835682');
select* from Admin

---------------


create table Appointment_(
 
	 email_ NVARCHAR(30) Primary key,
     date_ NVARCHAR(30),
     stime NVARCHAR(30),
     eTime NVARCHAR(30),
     
);

select* from Appointment_

drop table Appointment_
drop table appSchedule
drop table Transactions

create table appSchedule(
	aptId int primary key,
    date_ nvarchar(30),
	sTime nvarchar(30),
    eTime nvarchar(30),
    _email nvarchar(30) ,
    Foreign key(_email) references Admin(email)
);

insert into appSchedule
values
(1,'Monday' , '11:00:00' , '01:00:00' , 'hania@gmail.com'),
(2,'Monday' ,'08:30:00' , '10:00:00' , 'ali@gmail.com'),
(3,'Wednesday' , '01:30:00' , '3:00:00' ,'hania@gmail.com' );
select * from appSchedule
CREATE TABLE Transactions 
(		
	Transaction_number INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	Account_number_sender INT FOREIGN KEY REFERENCES Users(Account_number),	
	Account_number INT FOREIGN KEY REFERENCES Users(Account_number),	
	Amount int not null,
	Balance INT NOT NULL,
	date_ date,	
);
----------------------------ahan alt ----------------------------------------


CREATE TABLE Transactionss (
	email NVARCHAR(30) FOREIGN KEY REFERENCES Login__(email), --fk login (email)
	admin_name NVARCHAR(15) NOT NULL,		
	Transaction_number INT PRIMARY KEY NOT NULL,
	Account_number INT FOREIGN KEY REFERENCES Users(Account_number),
	Phone_number INT NOT NULL ,
	Amount int not null,
	Balance INT NOT NULL,
	date_ date,
	
);
--------------------------------loan type ahsan------------------------------------
CREATE TABLE Loan_Type(
    loan_type INT Primary key NOT NULL,
	loan_amt INT,
	loan_desc NVARCHAR(30) NOT NULL
	
);

select * from Loan_Type


CREATE TABLE Loan_request (
	Request_number INT PRIMARY KEY NOT NULL,
	Account_number INT FOREIGN KEY REFERENCES Users(Account_number),
	Loan_amount INT NOT NULL,
	loan_type INT FOREIGN KEY REFERENCES Loan_Type(loan_type),
	
);

select * from Loan_request
--------------------------------------------------------------------

CREATE TABLE Feedback (
		Account_number INT FOREIGN KEY REFERENCES Users(Account_number),
	   feedback NVARCHAR(100),
	
);

CREATE TABLE Services_type (
	service_id INT Primary KEY NOT NULL,		
	service_type NVARCHAR(15) NOT NULL,			
	
);
select * from Services_type
insert into Services_type
values
(1, 'debit card'),
(2, 'creditcard'),
(3, 'cheque book');


CREATE TABLE Service_requests(  --D_column INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
    requestID INT NOT NULL IDENTITY(1,1) PRIMARY KEY, -- index
	Account_number INT FOREIGN KEY REFERENCES Users(Account_number),		
	service_id INT FOREIGN KEY REFERENCES Services_type(service_id) , --forign key
);

select * from Service_requests




--ahsan bills


CREATE TABLE Bills_ (
	billID INT NOT NULL,
	email NVARCHAR(30) FOREIGN KEY REFERENCES Login__ (email), --fk login (email)
	bill_detail NVARCHAR(30),
	Balance INT NOT NULL,
	date_ date,
	
	
);
--------------------------hania alt service request------------------------------

CREATE TABLE Services_request(
    requestID int PRIMARY KEY,
	service_type nvarchar(15),
	Account_number INT FOREIGN KEY REFERENCES Users(Account_number),		
	service_id INT FOREIGN KEY REFERENCES Services_type(service_id) ,

);

select* from Services_request
-----------------add data in user---------------------------
insert into Services_request
values
(1, 'debit card',56789 ,3);

drop table Services_request

-----------------------add data in users---------------------------------
insert into Service_requests 
values
( 2 ,3),
(1, 1);
--------------------------------------------------------------------------


CREATE TABLE info
(
  inf nvarchar(100),
);

insert into info
values
('Banking hours are from 9:00 am to 5:00 pm'),
('One must be an account holder to get a credit card'),
('The minimum amount limit is 500')

select * from info

------------------------------------------income statement--------------------------------------------

CREATE TABLE IncomeStatement
(
  incID int PRIMARY KEY not null,
  Account_number int,
  revenue int,
  expenses int,
  net_income int,
  sources nvarchar(50),
  foreign key(Account_number) references Users(Account_number) 
);

insert into IncomeStatement
values
(1, 1 , 30800,10650,21350,'merchandise sale' );
select* from IncomeStatement
drop table IncomeStatement



--------------Signup----------------
CREATE PROCEDURE SignupUser
@username varchar(30),
@password nvarchar(30),
@email nvarchar(30),
@address nvarchar(50),
@phno nvarchar(30),
@Account_number int,
@Amount int

as begin
declare @Account_numbers int
	select @Account_numbers = max(@Account_number) + 1
	from Users u

	insert into Users values (@username,@password,@email,@address,@phno,@Account_number,@Amount );
end

exec SignupUser @username = 'Ahmed',@password = '1234567', @email = 'ahmed@gmail.com',@address ='pia', @phno = '03304556565' ,@Account_number = 1234 , @Amount =100

drop procedure SignupUser


-------------------LOGIN-----------------
create procedure LoginUser
@email nvarchar(30),
@password nvarchar(15),
@flag int output
as begin
declare @pass nvarchar(15)
set @flag = 0
select @pass = u.password_
from Users u
where u.email = @email

if(@pass = @password)
begin
set @flag = 1
end
if(@flag = 0)
begin
print 'invalid credentials'
end

end

declare @out int;
exec LoginUser
@email='haniaa.imtisal234@gmail.com',
@password='haniaa',
@flag = @out output
select @out as 'return_value'
 drop procedure LoginUser

select* from Loan_Type

--------------------------------------------------------------------------------------------------------------------------


---------------------------REQUEST LOAN--------------------------------
go
drop procedure if exists reqLoan
go
CREATE  procedure reqLoan
@found int ,
@reqID int ,
@l_amt int ,
@acc_no int ,
@type int
as
BEGIN
set @found = 1 
insert  into Loan_request values(@reqID, @acc_no, @l_amt ,@type)
END

execute reqLoan @found = 1, @reqID = 2, @l_amt = 80, @acc_no = 10534 , @type  = 1 
select * from Loan_request


insert into Loan_Type values(1, 18, 'ahsan gg')

-------------------------------------------------------------------------------------------------





--------------Transaction-------------
CREATE  procedure do_transaction
@acc_no_sender int ,
@acc_no int ,
@amount int ,
@balance int,
@date varchar(30)
AS begin
insert  into Transactions values(@acc_no_sender , @acc_no, @amount ,@balance, @date)
end

execute do_transaction  @acc_no_sender = 1 ,@acc_no = 2, @amount = 200 , @balance =2 , @date = '9-9-2020'
---------------Admin service approval(10)----------
--hania service_request without s at end 

CREATE PROCEDURE serviceApproval
@requestid int,
@requesttype nvarchar(15),
@status int output
AS BEGIN
declare @reqid int
 SET @status = 1;
 select @reqid = s.requestID
 from Services_request s
 where s.service_type = @requesttype
 if(@reqid = @requestid)
 begin
 set @status = 1
 end
 if(@status = 0)
begin
print 'service not approved'
end

end


declare @Approval int
execute serviceApproval 1 ,'debit card', @Approval output
select @Approval as aproval

DROP PROCEDURE serviceApproval
------------View Income Statement(11)-----------

CREATE PROCEDURE viewIncomeStatement
@acc_no int
AS 
BEGIN
 if exists(select Account_number from IncomeStatement i where Account_number=@acc_no)
 Begin
 select revenue,expenses, net_income , sources from IncomeStatement where Account_number= @acc_no;
 end
 else
 begin 
 print ' user have no income statement'
 end

end

execute viewIncomeStatement @acc_no = 1

drop procedure viewIncomeStatement

--[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

---------------Book an Appointment(12)--------------


select * from appSchedule
create table appSchedule(
	aptId int primary key,
    date_ date,
	sTime int,
    eTime int,
    _email nvarchar(40) ,
    --Foreign key(myemail) references Admin(email),
);
drop table appSchedule


CREATE  VIEW upcomingappointmentss_
AS
    SELECT 
        ap.aptId AS appId,
        a.email AS email,
        u.username AS name_,
        ap.date_ AS date_,
        ap.stime AS sTime,
        ap.eTime AS eTime,
        asd.day_ AS day_,
        asd.sTime AS AdminSTime,
        asd.eTime AS AdmineTime
		
    FROM
        (((Appointment_ ap
        JOIN Admin a ON ((ap.email = a.email)))
        JOIN Users u ON ((a.email = u.email)))
        JOIN appSchedule asd ON ((a.email = asd._email)))))))
    
select* from upcomingappointmentss_
select* from Admin






---------------------------PAY BILL--------------------------------
insert into Bills_ values (1, 'ali@gmail.com', 'School fees', 200, '2019-08-01')

select*from Bills_
select*from Login__
go
drop procedure if exists payBill
go
create procedure payBill 

@billIDP INT,
@found int output
as begin
	set @found = 0
	if(EXISTS(SELECT * FROM Bills_ WHERE billID = @billIDP))
		DELETE from Bills_
		WHERE billID = @billIDP
		Set @found = 1		
end
--testing
declare @foundO INT;
execute payBill 101, @found = @foundO

select* from Bills_

-------------------------------------------------viewLoan----------------------------------------------



go
drop procedure if exists viewLoan
go
create procedure viewLoan 
as begin
	SELECT loan_type AS LOAN_TYPE, loan_amt AS AMOUNT, loan_desc AS DESCRIPTION FROM Loan_Type 
end
--testing
--declare @found int
--execute viewLoan
--select @found

-----------------------------------------------------viewSLoan-------------------------------------------------


go
drop procedure if exists viewSLoan
go
create procedure viewSLoan 
@todo nvarchar(15),
@reqNumberP INT
as begin
	
	if(@todo = 'All')
		SELECT * FROM Loan_request
	ELSE if (EXISTS(SELECT * FROM Loan_request WHERE Request_number = @reqNumberP))
		SELECT * FROM Loan_request WHERE Request_number = @reqNumberP
end
--testing
--declare @found int
--execute pastTransaction 'All', '123'
--select @found

--------------------------------------------pastTransactions---------------------------------------------

go
drop procedure if exists pastTransactions
go
create procedure pastTransactions 
@trscID nvarchar(15),
@dateP date,
@found int output
as begin
	set @found = 0
	if(exists(select* from Transactionss where Transaction_number = @trscID and date_ = @dateP))
		set @found = 1
	if(@found = 1)
		select* from Transactionss 
end
--testing
--declare @found int
--execute pastTransaction '123', '12-8-2019', @found output
--select @found

----------------------------------------------------------------------------------------------------

select * from Feedback

CREATE  procedure feedback_saved

@found int ,
@acc_no int ,
@feed nvarchar(30)
as

insert  into feedback values( @acc_no, @feed)


execute feedback_saved @found = 0 , @acc_no = 2 , @feed  = 'yaallah'
  
select * from Feedback

----------------------------------------------------------------------------------------------------------------------------------
CREATE  procedure service_request_save
@found int ,
@acc_no int ,
@type int
as
set @found = 1 
insert  into Service_requests values( @acc_no, @type)

execute service_request_save @found = 1 , @acc_no = 2 , @type  = 1 

select*from Service_requests


----------------------------------------------------------------------------------------------------------------------------------

CREATE  procedure do_transactions
@acc_no_sender int ,
@acc_no int ,
@amount int ,
@bal int ,
@date date
as
insert  into Transactionss values(@acc_no_sender , @acc_no, @amount , @bal , @date , @amount)

select * from Transactions ---ahsan hania 
select * from Transactionss
--------------------------------------------------------------------------------------------------------------------
create procedure display_balancee
@acc_no int , 
@amount int output
as 
select amount from Users 
where @acc_no = Account_number 

DECLARE @amount int;
execute display_balance '1' , @amount 

select * from display_balancee
select Account_number , amount from Users where 2 = Account_number
SELECT @amount 

insert into Users
values
('nawal@gmail.com', 'ali' , 1 ,1,'21350' , 2,200)


----------------------------------------------------------------------------------------------------------------------------------

CREATE  procedure feedback_saved

@found int ,
@acc_no int ,
@feed nvarchar(30)
as

insert  into feedback values( @acc_no, @feed)
execute service_request_save @found = 1 , @acc_no = 2 , @type  = 1 
----------------------------------------------------------------------------------------------------------------